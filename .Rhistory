load("data/pub_targets_comb.Rda") #combined pops/covg per year across countries
pop_calcs <- pop_calcs_comb
}
if(reinfect!=0) {
plhiv_params$p_infect <- reinfect
}
if(price_tpt=="3hp_reduced") {
plhiv_params$c_3hp[4:length(plhiv_params$c_3hp)] <- 0.5*plhiv_params$c_3hp[4:length(plhiv_params$c_3hp)] #price of 3HP drops by half from 2023 on
}
plhiv_params$n_visit_3hp <- visits_3hp
plhiv_params$wastage <- ifelse(tpt_wastage=="full courses", 0,
as.double(tpt_wastage))
plhiv_params$part_course_cost <- ifelse(tpt_wastage=="full courses",
1, 0.5)
plhiv_params$p_ltbi <- NULL #now varying by country - remove to make sure no references to old value
if(type=="i4tb") { #use I4TB targets
plhiv_params$p_initiate <- plhiv_params$p_initiate_i4tb
comp_scen <- "sq"
start_yr <- 2020
end_yr <- start_yr+analytic_horizon
policy_end_yr <- start_yr + policy_horizon
#reshape targets so that scenario and treatment types are columns
names(targets) <- sub("_covg$", "", names(targets)) #remove "_covg" from col names - makes pivoting easier
#add in columns for 0 1HP under the sq, dir, and  cat scenarios
targets <- targets %>%
filter(!(code %in% exclusions_i4tb))
#truncate impact of direct scenario to specified year
targets <- targets %>% mutate(child_3hp_dir=if_else(year>dir_end, 0, child_3hp_dir),
adol_3hp_dir=if_else(year>dir_end, 0, adol_3hp_dir),
adult_3hp_dir=if_else(year>dir_end, 0, adult_3hp_dir),
plhiv_new_3hp_dir=if_else(year>dir_end, 0, plhiv_new_3hp_dir),
plhiv_backlog_3hp_dir=if_else(year>dir_end, 0, plhiv_backlog_3hp_dir),
child_ipt_dir=if_else(year>dir_end, child_ipt_sq, child_ipt_dir),
adol_ipt_dir=if_else(year>dir_end, adol_ipt_sq, adol_ipt_dir),
adult_ipt_dir=if_else(year>dir_end, adult_ipt_sq, adult_ipt_dir),
plhiv_new_ipt_dir=if_else(year>dir_end, plhiv_new_ipt_sq, plhiv_new_ipt_dir),
plhiv_backlog_ipt_dir=if_else(year>dir_end, plhiv_backlog_ipt_sq, plhiv_backlog_ipt_dir))
targets <- pivot_longer(targets,
cols=c(ends_with("sq"),
ends_with("dir"),
ends_with("cat"),
ends_with("cat1")),
names_to=c(".value", "scenario"),
names_sep="_(?=[^_]+$)") #this is regex for "last underscore only"
plhiv_setup <- targets %>% select(-pop) %>%
rename("initiate_ipt_covg_new"="plhiv_new_ipt",
"initiate_3hp_covg_new"="plhiv_new_3hp",
"initiate_1hp_covg_new"="plhiv_new_1hp",
"initiate_ipt_covg_prev"="plhiv_backlog_ipt",
"initiate_3hp_covg_prev"="plhiv_backlog_3hp",
"initiate_1hp_covg_prev"="plhiv_backlog_1hp",
"plhiv_new"="plhiv_art_new_lag",
"plhiv_prev"="plhiv_art") %>%
select(country, code, year, scenario, plhiv_new, backlog,
initiate_ipt_covg_new, initiate_3hp_covg_new, initiate_1hp_covg_new,
initiate_ipt_covg_prev, initiate_3hp_covg_prev, initiate_1hp_covg_prev,) %>%
mutate(backlog=if_else(year==2020, backlog, 0))
}
if(type=="pub") { #use I4TV targets
comp_scen <- "none"
start_yr <- 2023
end_yr <- start_yr + analytic_horizon - 1
policy_end_yr <- start_yr + policy_horizon - 1
pop_calcs <- pivot_longer(pop_calcs %>% filter(year>=start_yr & !(code %in% exclusions_pub)),
cols=c(ends_with("tpt"),
ends_with("none")),
names_to=c(".value", "scenario"),
names_sep="_(?=[^_]+$)") #this is regex for "last underscore only"
pop_calcs <- pop_calcs %>% mutate(tpt_type=tpt_type)
pop_calcs <- pop_calcs %>%
mutate(initiate_ipt_covg_new_nonadj=if_else(tpt_type=="ipt", plhiv_new_covg, 0),
initiate_ipt_covg_prev_nonadj=if_else(tpt_type=="ipt", plhiv_backlog_covg, 0),
initiate_3hp_covg_new_nonadj=if_else(tpt_type=="3hp", plhiv_new_covg, 0),
initiate_3hp_covg_prev_nonadj=if_else(tpt_type=="3hp", plhiv_backlog_covg, 0),
initiate_1hp_covg_new_nonadj=if_else(tpt_type=="1hp", plhiv_new_covg, 0),
initiate_1hp_covg_prev_nonadj=if_else(tpt_type=="1hp", plhiv_backlog_covg, 0)) %>%
rename("plhiv_new"="plhiv_art_new_lag",
"plhiv_prev"="plhiv_art")
plhiv_setup <- pop_calcs %>%
select(country, code, year, scenario, plhiv_new, backlog,
initiate_ipt_covg_new_nonadj, initiate_3hp_covg_new_nonadj, initiate_1hp_covg_new_nonadj,
initiate_ipt_covg_prev_nonadj, initiate_3hp_covg_prev_nonadj, initiate_1hp_covg_prev_nonadj)
}
#loop over params in PSA
plhiv_params_all <- plhiv_params
#save all output
plhiv_comb_all <- list()
plhiv_cea_all_all <- list()
if(type=="i4tb") {
#compare each strategy separately against status quo
plhiv_cea_dir_all <- list()
plhiv_cea_cat_all <- list()
plhiv_cea_cat1_all <- list()
}
if(price_tpt=="vary") {
#vary 3hp price only - all other params fixed at means
plhiv_params <- sapply(names(plhiv_params_all), function(x)
mean(plhiv_params_all[[x]]), simplify=F, USE.NAMES=T)
cost_params <- sapply(names(cost_params), function(x)
as.data.frame(t(colMeans(cost_params[[x]]))), simplify=F, USE.NAMES=T)
ltbi_params <- sapply(names(ltbi_params), function(x)
mean(ltbi_params[[x]]), simplify=F, USE.NAMES=T)
p_notif_adult <- sapply(names(p_notif_adult), function(x)
mean(p_notif_adult[[x]]), simplify=F, USE.NAMES=T)
other_params <- sapply(names(other_params), function(x)
mean(other_params[[x]]), simplify=F, USE.NAMES=T)
#3hp price is determined by array value - only 1 model run per array, only 500 arrays
c_3hp_vec <- seq(from=0.1, to=50, by=0.1)
index_start <- 1
index_end <- 1
}
if(cost_tbtx=="vary") {
#vary tb treatment cost price only - all other params fixed at country means
plhiv_params <- sapply(names(plhiv_params_all), function(x)
mean(plhiv_params_all[[x]]), simplify=F, USE.NAMES=T)
cost_params <- sapply(names(cost_params), function(x)
as.data.frame(t(colMeans(cost_params[[x]]))), simplify=F, USE.NAMES=T)
ltbi_params <- sapply(names(ltbi_params), function(x)
mean(ltbi_params[[x]]), simplify=F, USE.NAMES=T)
p_notif_adult <- sapply(names(p_notif_adult), function(x)
mean(p_notif_adult[[x]]), simplify=F, USE.NAMES=T)
other_params <- sapply(names(other_params), function(x)
mean(other_params[[x]]), simplify=F, USE.NAMES=T)
#tb tx cost is determined by array value - only 1 model run per array, only 500 arrays
c_tbtx_vec <- seq(from=10, to=5000, by=10) #length of 500
index_start <- 1
index_end <- 1
}
j <- 1
print(j)
if(price_tpt!="vary" & cost_tbtx!="vary") {
#extract ith elements of params that are varied in the PSA only
plhiv_params <- sapply(names(plhiv_params_all), function(x)
(if(length(plhiv_params_all[[x]])==1 | x %in% c("c_3hp", "c_1hp"))
plhiv_params_all[[x]] else plhiv_params_all[[x]][j]),
simplify=F, USE.NAMES=T)
}
if(meta_psa==1|meta_psa==2) {
plhiv_params$c_3hp <- plhiv_params$c_3hp_psa
plhiv_params$c_1hp <- plhiv_params$c_1hp_psa
}
if(price_tpt=="vary") {
plhiv_params$c_3hp <- c_3hp_vec[[array]]
}
if(cost_tbtx=="vary") {
cost_params <- sapply(names(cost_params), function(x) {
cost_params[[x]][["tb_tx"]] <- c_tbtx_vec[[array]]
cost_params[[x]]
}, USE.NAMES=T, simplify=F)
}
plhiv_params$yrs_new <- 2 #spend 2 years newly enrolled before becoming established on ART
plhiv_params$yrs <- 10 #track 10 years of LTBI status (remains constant after year 10)
#manipulate progression risk to be vector over time (since entering the model). last stratification is 10+
p_reactivate_new <- c(plhiv_params$p_reactivate_new_yr1, plhiv_params$p_reactivate_new_yr2, rep(0, length(3:10)))
p_reactivate_est <- c(plhiv_params$p_reactivate_est_yr1, plhiv_params$p_reactivate_est_yr2,
rep(plhiv_params$p_reactivate_est_yr3_9, length(3:9)),
plhiv_params$p_reactivate_est_yr10plus)
p_reactivate_ltfu <- c(0, plhiv_params$p_reactivate_ltfu_yr2,
rep(plhiv_params$p_reactivate_ltfu_yr3_9, length(3:9)),
plhiv_params$p_reactivate_ltfu_yr10plus)
plhiv_params$p_reactivate_new <- p_reactivate_new
plhiv_params$p_reactivate_est <- p_reactivate_est
plhiv_params$p_reactivate_ltfu <- p_reactivate_ltfu
#need similar time-dependent vector for death/LTFU risk among newly enrolled
p_new_ltfu <- c(plhiv_params$p_new_ltfu, plhiv_params$p_est_ltfu, rep(0, length(3:10)))
p_new_die <- c(plhiv_params$p_new_die, plhiv_params$p_est_die, rep(0, length(3:10)))
plhiv_params$p_new_ltfu <- p_new_ltfu
plhiv_params$p_new_die <- p_new_die
#merge in LTBI prevalence and probably of tx success which vary by country
ltbi_params_use <- unlist(sapply(names(ltbi_params), function(x)
ltbi_params[[x]][[j]], simplify=F, USE.NAMES=T))
p_success_use <- unlist(sapply(names(p_success_plhiv), function(x)
p_success_plhiv[[x]][[j]], simplify=F, USE.NAMES=T))
plhiv_setup <- plhiv_setup %>% mutate(p_ltbi=ltbi_params_use[code],
p_success=p_success_use[code])
#update TPT coverage probs to account for non-initiation - to make more consistent w/ HHC overall reach (doesn't matter for CEA)
if(type=="pub") {
plhiv_setup <- plhiv_setup %>% mutate(initiate_ipt_covg_new=initiate_ipt_covg_new_nonadj*plhiv_params$p_initiate,
initiate_3hp_covg_new=initiate_3hp_covg_new_nonadj*plhiv_params$p_initiate,
initiate_1hp_covg_new=initiate_1hp_covg_new_nonadj*plhiv_params$p_initiate,
initiate_ipt_covg_prev=initiate_ipt_covg_prev_nonadj*plhiv_params$p_initiate,
initiate_3hp_covg_prev=initiate_3hp_covg_prev_nonadj*plhiv_params$p_initiate,
initiate_1hp_covg_prev=initiate_1hp_covg_prev_nonadj*plhiv_params$p_initiate)
}
#model TB status and TPT status for first year of newly enrolled PLHIV (for 2020-2030)
plhiv_new <- model_tb_new_plhiv(plhiv_setup, plhiv_params) #update: LTBI prev varies by country
#confirmed pops add up as expected
#plhiv_new$ltbi_new_tpt + plhiv_new$ltbi_new_not + plhiv_new$active_tb_new_not + plhiv_new$no_tb_new_tpt + plhiv_new$no_tb_new_not + plhiv_new$no_tb_new_not_tb + plhiv_new$tb_deaths_enroll - plhiv_setup$plhiv_new
#initiate remaining columns to be updated each timestep
plhiv <- plhiv_setup %>% ungroup() %>% #deaths start out as 0 (we add tb_deaths_enroll in the loop over years)
mutate(cases_est=0, notif_est=0,
cases_ltfu=0, notif_ltfu=0,
tb_deaths=0, non_tb_deaths=0,
cum_tb_deaths=0, cum_non_tb_deaths=0,
#TPT outcomes start out as 0
initiate_ipt_est=0, initiate_3hp_est=0, initiate_1hp_est=0,
tox_nohosp_ipt_est=0, tox_nohosp_3hp_est=0, tox_nohosp_1hp_est=0,
tox_hosp_ipt_est=0, tox_hosp_3hp_est=0, tox_hosp_1hp_est=0,
complete_ipt_est=0, complete_3hp_est=0, complete_1hp_est=0,
part_complete_ipt_est=0, part_complete_3hp_est=0, part_complete_1hp_est=0,
#TB-TPT status - est not on TPT are not 0s - need to split up by latent status
#LTBI are in plhiv_ltbi instead
active_tb_est_tpt=0,
active_tb_est_not=if_else(year==start_yr, backlog*p_ltbi*plhiv_params$p_reactivate_est_yr1, 0),
no_tb_est_tpt=0,
no_tb_est_not=if_else(year==start_yr, backlog*(1-p_ltbi), 0),
no_tb_est_not_tb=0,
#TB status - LTFU (LTBI are in plhiv_ltbi instead)
active_tb_ltfu_tpt=0, active_tb_ltfu_not=0,
no_tb_ltfu_tpt=0, no_tb_ltfu_not=0
)
plhiv <- cbind(plhiv, plhiv_new %>% select(tb_deaths_enroll)) #tb_deaths_enroll remains constant over strategies
#LTBI separate dataframes so we can track yr since entering the model
plhiv_ltbi <- cbind("t"=1,
plhiv_setup %>% select(country, code, year, scenario, p_ltbi, backlog),
plhiv_new %>% select(ltbi_new_tpt, ltbi_new_not)) %>%
mutate(ltbi_est_tpt=0,
ltbi_est_not=if_else(year==start_yr, backlog*p_ltbi*(1-plhiv_params$p_reactivate_est_yr1), 0),
ltbi_ltfu_tpt=0, ltbi_ltfu_not=0) %>%
select(-c(p_ltbi, backlog))
#model TB cases/notifications and TPT initiation among previously enrolled PWH
plhiv_est <- model_outcomes_est_plhiv(plhiv %>% filter(year==start_yr),
plhiv_ltbi %>% filter(year==start_yr),
plhiv_params)
#confirmed populations add up
if(FALSE) {
plhiv_est$ltbi_est_tpt + plhiv_est$ltbi_est_not + plhiv_est$active_tb_est_not + plhiv_est$no_tb_est_tpt + plhiv_est$no_tb_est_not + plhiv_est$no_tb_est_not_tb +
plhiv_est$tb_deaths_enroll +
plhiv_est$ltbi_ltfu_tpt + plhiv_est$ltbi_ltfu_not + plhiv_est$active_tb_ltfu_tpt + plhiv_est$active_tb_ltfu_not + plhiv_est$no_tb_ltfu_tpt + plhiv_est$no_tb_ltfu_not -
plhiv_setup %>% filter(year==start_yr) %>% pull(backlog)
}
#merge TPT status and case updates back into plhiv and plhiv_ltbi - replace works best for conditional replacement
plhiv_ltbi <- plhiv_ltbi %>% mutate(ltbi_est_tpt=replace(ltbi_est_tpt, year==start_yr, plhiv_est$ltbi_est_tpt),
ltbi_est_not=replace(ltbi_est_not, year==start_yr, plhiv_est$ltbi_est_not),
ltbi_ltfu_tpt=replace(ltbi_ltfu_tpt, year==start_yr, plhiv_est$ltbi_ltfu_tpt),
ltbi_ltfu_not=replace(ltbi_ltfu_not, year==start_yr, plhiv_est$ltbi_ltfu_not))
plhiv <- plhiv %>% ungroup() %>% mutate(cases_est=replace(cases_est, year==start_yr, plhiv_est$cases_est),
notif_est=replace(notif_est, year==start_yr, plhiv_est$notif_est),
tb_deaths_enroll=replace(tb_deaths_enroll, year==start_yr, tb_deaths_enroll[year==start_yr]+plhiv_est$tb_deaths_enroll),
initiate_ipt_est=replace(initiate_ipt_est, year==start_yr, plhiv_est$initiate_ipt_est),
initiate_3hp_est=replace(initiate_3hp_est, year==start_yr, plhiv_est$initiate_3hp_est),
initiate_1hp_est=replace(initiate_1hp_est, year==start_yr, plhiv_est$initiate_1hp_est),
tox_nohosp_ipt_est=replace(tox_nohosp_ipt_est, year==start_yr, plhiv_est$tox_nohosp_ipt_est),
tox_nohosp_3hp_est=replace(tox_nohosp_3hp_est, year==start_yr, plhiv_est$tox_nohosp_3hp_est),
tox_nohosp_1hp_est=replace(tox_nohosp_1hp_est, year==start_yr, plhiv_est$tox_nohosp_1hp_est),
tox_hosp_ipt_est=replace(tox_hosp_ipt_est, year==start_yr, plhiv_est$tox_hosp_ipt_est),
tox_hosp_3hp_est=replace(tox_hosp_3hp_est, year==start_yr, plhiv_est$tox_hosp_3hp_est),
tox_hosp_1hp_est=replace(tox_hosp_1hp_est, year==start_yr, plhiv_est$tox_hosp_1hp_est),
complete_ipt_est=replace(complete_ipt_est, year==start_yr, plhiv_est$complete_ipt_est),
complete_3hp_est=replace(complete_3hp_est, year==start_yr, plhiv_est$complete_3hp_est),
complete_1hp_est=replace(complete_1hp_est, year==start_yr, plhiv_est$complete_1hp_est),
part_complete_ipt_est=replace(part_complete_ipt_est, year==start_yr, plhiv_est$part_complete_ipt_est),
part_complete_3hp_est=replace(part_complete_3hp_est, year==start_yr, plhiv_est$part_complete_3hp_est),
part_complete_1hp_est=replace(part_complete_1hp_est, year==start_yr, plhiv_est$part_complete_1hp_est),
active_tb_est_tpt=replace(active_tb_est_tpt, year==start_yr, plhiv_est$active_tb_est_tpt),
active_tb_est_not=replace(active_tb_est_not, year==start_yr, plhiv_est$active_tb_est_not),
no_tb_est_tpt=replace(no_tb_est_tpt, year==start_yr, plhiv_est$no_tb_est_tpt),
no_tb_est_not=replace(no_tb_est_not, year==start_yr, plhiv_est$no_tb_est_not),
no_tb_est_not_tb=replace(no_tb_est_not_tb, year==start_yr, plhiv_est$no_tb_est_not_tb),
active_tb_ltfu_tpt=replace(active_tb_ltfu_tpt, year==start_yr, plhiv_est$active_tb_ltfu_tpt),
active_tb_ltfu_not=replace(active_tb_ltfu_not, year==start_yr, plhiv_est$active_tb_ltfu_not),
no_tb_ltfu_tpt=replace(no_tb_ltfu_tpt, year==start_yr, plhiv_est$no_tb_ltfu_tpt),
no_tb_ltfu_not=replace(no_tb_ltfu_not, year==start_yr, plhiv_est$no_tb_ltfu_not)
)
#transform LTBI states into matrix that tracks time t
plhiv_ltbi <- do.call("rbind", replicate(10, plhiv_ltbi, simplify=F))
ts <- unlist(lapply(1:10, function(x) rep(x, nrow(plhiv_new))))
plhiv_ltbi <- plhiv_ltbi %>% mutate(t=ts)
plhiv_ltbi <- plhiv_ltbi %>% mutate(ltbi_new_tpt=if_else(t==1, ltbi_new_tpt, 0),
ltbi_new_not=if_else(t==1, ltbi_new_not, 0),
ltbi_est_tpt=if_else(t==1, ltbi_est_tpt, 0),
ltbi_est_not=if_else(t==1, ltbi_est_not, 0),
ltbi_ltfu_tpt=if_else(t==1, ltbi_ltfu_tpt, 0),
ltbi_ltfu_not=if_else(t==1, ltbi_ltfu_not, 0))
plhiv_ltbi <- plhiv_ltbi %>% mutate(p_reactivate_new=p_reactivate_new[t],
p_reactivate_est=p_reactivate_est[t],
p_reactivate_ltfu=p_reactivate_ltfu[t])
#combine plhiv with newly enrolled and add enrollment deaths for 2023 only (later years gets added in loop)
plhiv <- bind_cols(plhiv, plhiv_new %>% select(-starts_with("ltbi"), -tb_deaths_enroll)) #LTBI goes in plhiv_ltbi instead
plhiv <- plhiv %>% mutate(tb_deaths=if_else(year==start_yr, tb_deaths_enroll, tb_deaths),
cum_tb_deaths=if_else(year==start_yr, tb_deaths_enroll, cum_tb_deaths))
#merge in adult notification rates which vary by country
p_notif_adult_use <- unlist(sapply(names(p_notif_adult), function(x)
p_notif_adult[[x]][[j]], simplify=F, USE.NAMES=T))
plhiv <- plhiv %>% mutate(p_notif_ltfu=p_notif_adult_use[code])
plhiv_ltbi <- plhiv_ltbi %>% mutate(p_notif_ltfu=p_notif_adult_use[code])
#each year, calculate TPT initiation, events, completion
plhiv_all <- plhiv %>% filter(year==start_yr)
plhiv_ltbi_start <- plhiv_ltbi %>% filter(year==start_yr)
#convert plhiv_ltbi_all to list of matrices for easier multiplication by reactivation over time
plhiv_ltbi_start <- sapply(c('ltbi_new_tpt', 'ltbi_new_not', 'ltbi_est_tpt',
'ltbi_est_not', 'ltbi_ltfu_tpt', 'ltbi_ltfu_not'), function(x)
matrix(as.numeric(as.matrix(pivot_wider(plhiv_ltbi_start %>%
select("t", "code", "scenario", "year", !!as.symbol(x)),
names_from="t", values_from=all_of(x)) %>%
select(-c("code", "scenario", "year")))), ncol=10), USE.NAMES=T, simplify=F)
plhiv_ltbi_all <- list()
plhiv_ltbi_all[[as.character(start_yr)]] <- plhiv_ltbi_start
#plhiv_ltbi_all <- simplify2array(plhiv_ltbi_all): 1st dim = rows = combo of country and policy; 2nd dim = cols = year, p_notif_ltfu, t1-t10; 3rd dim = elements = ltbi populations
for(i in (start_yr+1):(end_yr)) {
if(i<=policy_end_yr) {
#plhiv: mortality, reactivation, notifications don't vary over time/by country
#use TB mortality on ART for both treated and untreated (since we assume everyone gets notified)
plhiv_prev <- plhiv_all %>% filter(year==i-1) #update status from previous timestep
plhiv_ltbi_prev <- plhiv_ltbi_all[[as.character(i-1)]] #update status from previous timestep
plhiv_covg <- plhiv %>% filter(year==i) #but use covg from current timestep
plhiv_ltbi_covg <- plhiv_ltbi %>% filter(year==i & t==1)
plhiv_cur <- model_tb_plhiv(plhiv_prev, plhiv_ltbi_prev, plhiv_covg,
plhiv_ltbi_covg, plhiv_params)
plhiv_all <- rbind(plhiv_all, plhiv_cur[[1]])
plhiv_ltbi_all[[as.character(i)]] <- plhiv_cur[[2]]
} else { #after end of policy horizon, just model out pops from previous years
plhiv_prev <- plhiv_all %>% filter(year==i-1)
plhiv_ltbi_prev <- plhiv_ltbi_all[[as.character(i-1)]] #update status from previous timestep
plhiv_covg <- plhiv %>% filter(year==policy_end_yr) %>% mutate(year=i)
plhiv_covg[, 5:ncol(plhiv_covg)] <- 0 #empty/0s to use in the model
plhiv_ltbi_covg <- plhiv_ltbi %>% filter(year==policy_end_yr & t==1)
plhiv_ltbi_covg[, 5:ncol(plhiv_ltbi_covg)] <- 0 #empty/0s to use in the model
plhiv_cur <- model_tb_plhiv(plhiv_prev, plhiv_ltbi_prev, plhiv_covg,
plhiv_ltbi_covg, plhiv_params)
plhiv_all <- rbind(plhiv_all, plhiv_cur[[1]])
plhiv_ltbi_all[[as.character(i)]] <- plhiv_cur[[2]]
}
}
#plot deaths over time
if(FALSE) {
ggplot(plhiv_all, aes(x=year, y=tb_deaths, color=code)) +
geom_line() + facet_wrap(~scenario) + theme_bw()
ggplot(plhiv_all, aes(x=year, y=tb_deaths_enroll, color=code)) +
geom_line() + facet_wrap(~scenario) + theme_bw()
ggplot(plhiv_all, aes(x=year, y=non_tb_deaths, color=code)) +
geom_line() + facet_wrap(~scenario) + theme_bw()
ggplot(plhiv_all, aes(x=year, y=cum_tb_deaths, color=code)) +
geom_line() + facet_wrap(~scenario) + theme_bw()
ggplot(plhiv_all, aes(x=year, y=cum_non_tb_deaths, color=code)) +
geom_line() + facet_wrap(~scenario) + theme_bw()
ggplot(plhiv_all, aes(x=year, y=cases_new, color=code)) +
geom_line() + facet_wrap(~scenario) + theme_bw()
ggplot(plhiv_all, aes(x=year, y=cases_est, color=code)) +
geom_line() + facet_wrap(~scenario) + theme_bw()
ggplot(plhiv_all, aes(x=year, y=cases_ltfu, color=code)) +
geom_line() + facet_wrap(~scenario) + theme_bw()
}
plhiv_all <- plhiv_all %>% select(-tb_deaths_enroll) #now added to tb_deaths, can remove
#move 2nd column of ltbi_new to prev so that "new" is 1st yr only
for(i in 1:length(plhiv_ltbi_all)) {
plhiv_ltbi_all[[i]][["ltbi_est_tpt"]][,2] <- plhiv_ltbi_all[[i]][["ltbi_est_tpt"]][,2] +
plhiv_ltbi_all[[i]][["ltbi_new_tpt"]][,2]
plhiv_ltbi_all[[i]][["ltbi_new_tpt"]][,2] <- 0
plhiv_ltbi_all[[i]][["ltbi_est_not"]][,2] <- plhiv_ltbi_all[[i]][["ltbi_est_not"]][,2] +
plhiv_ltbi_all[[i]][["ltbi_new_not"]][,2]
plhiv_ltbi_all[[i]][["ltbi_new_not"]][,2] <- 0
}
#move LTBI sizes back into plhiv_all (no longer need tracking by t)
plhiv_ltbi_all <- sapply(names(plhiv_ltbi_all), function(x)
sapply(names(plhiv_ltbi_all[[1]]), function(y)
rowSums(plhiv_ltbi_all[[x]][[y]]), USE.NAMES=T, simplify=F), USE.NAMES=T, simplify=F)
plhiv_ltbi_all <- as.data.frame(bind_rows(plhiv_ltbi_all, .id="year"))
plhiv_all <- cbind(plhiv_all, plhiv_ltbi_all %>% select(-year))
if(FALSE) {
#checks
#for new PLHIV - all. small difference over time is deaths_enroll
plhiv_all$ltbi_new_tpt + plhiv_all$ltbi_new_not + plhiv_all$active_tb_new_tpt +
plhiv_all$active_tb_new_not + plhiv_all$no_tb_new_tpt + plhiv_all$no_tb_new_not +
plhiv_all$no_tb_new_not_tb - plhiv_all$plhiv_new
#and confirmed that pop_size is static after policy horizon ends
plhiv_test <- plhiv_all %>%
mutate(total= cum_tb_deaths + cum_non_tb_deaths +
ltbi_ltfu_tpt + no_tb_ltfu_tpt + active_tb_ltfu_tpt +
ltbi_ltfu_not + no_tb_ltfu_not + active_tb_ltfu_not +
ltbi_est_tpt + ltbi_est_not +
active_tb_est_tpt + active_tb_est_not +
no_tb_est_tpt + no_tb_est_not + no_tb_est_not_tb
)
View(plhiv_test %>% select(country, year, scenario, plhiv_new, total)) #small difference is deaths_enroll?
}
if(FALSE){
#calculate total plhiv on ART
plhiv_test <- plhiv_all %>%
mutate(plhiv_est_tpt=ltbi_est_tpt + no_tb_est_tpt + active_tb_est_tpt,
plhiv_est_not=ltbi_est_not + no_tb_est_not + no_tb_est_not_tb +
active_tb_est_not,
plhiv_est=plhiv_est_tpt + plhiv_est_not,
plhiv_ltfu_tpt=ltbi_ltfu_tpt + no_tb_ltfu_tpt + active_tb_ltfu_tpt,
plhiv_ltfu_not=ltbi_ltfu_not + no_tb_ltfu_not + active_tb_ltfu_not,
plhiv_ltfu=plhiv_ltfu_tpt + plhiv_ltfu_not,
plhiv_art=plhiv_new + plhiv_est,
plhiv_all=plhiv_new + plhiv_est + plhiv_ltfu)
#note: this is not the same as the graph from tb_targets - doesn't include TPT ART from pre-2020
ggplot(plhiv_test, aes(x=year, y=plhiv_art, color=country)) +
geom_line() + facet_wrap(~scenario)
ggsave("data/viz/plhiv_art_scen2_2.jpg", dpi=500, height=6, width=10)
ggplot(plhiv_test, aes(x=year, y=plhiv_ltfu, color=country)) +
geom_line() + facet_wrap(~scenario)
ggsave("data/viz/plhiv_ltfu_scen2_2.jpg", dpi=500, height=6, width=10)
ggplot(plhiv_test, aes(x=year, y=plhiv_ltfu_tpt, color=country)) +
geom_line() + facet_wrap(~scenario)
ggsave("data/viz/plhiv_ltfu_tpt_scen2_2.jpg", dpi=500, height=6, width=10)
ggplot(plhiv_test, aes(x=year, y=plhiv_ltfu_not, color=country)) +
geom_line() + facet_wrap(~scenario)
ggsave("data/viz/plhiv_ltfu_not_scen2_2.jpg", dpi=500, height=6, width=10)
}
#combine across TPT and Not TPT, Est and New groups - so same format as contacts dataframe
plhiv_all <- plhiv_all %>%
mutate(ltfu=ltbi_ltfu_tpt + active_tb_ltfu_tpt + no_tb_ltfu_tpt +
ltbi_ltfu_not + active_tb_ltfu_not + no_tb_ltfu_not) %>% #keep track of LTFU for costs (no ART costs)
mutate(no_tb_est_not=no_tb_est_not + no_tb_est_not_tb,
no_tb_new_not=no_tb_new_not + no_tb_new_not_tb) %>%
select(-c(no_tb_est_not_tb, no_tb_new_not_tb, p_notif_ltfu)) #remove this so consistent naming across variables - no longer need to track it
plhiv_comb <- pivot_longer(plhiv_all, cols=c(ends_with("_tpt"), ends_with("_not")),
names_to=c(".value", "tpt_status"),
names_sep="_(?=[^_]+$)") #this is regex for "last underscore only"
col_sep <- which(names(plhiv_comb)=="tpt_status")
plhiv_comb <- plhiv_comb %>% group_by_at(1:(col_sep-1)) %>%
summarise_at(vars(-tpt_status), sum)
plhiv_comb <- pivot_longer(plhiv_comb, cols=c(ends_with("_new"), ends_with("_est"),
ends_with("_ltfu"),
-ends_with("covg_new"),
-ends_with("covg_prev"),
-starts_with("plhiv")),
names_to=c(".value", "art_status"),
names_sep="_(?=[^_]+$)")
#show ART status over time
if(FALSE) {
library(ggpubr)
plot_list <- list()
for(i in unique(plhiv_comb$code)) {
fig <- ggplot(plhiv_comb %>% filter(code==i & scenario=="none"),
aes(x=year, linetype=art_status)) +
geom_line(aes(y=ltbi, color="LTBI")) +
geom_line(aes(y=no_tb, color="No TB")) +
labs(x="", y="", color="", linetype="") +
ggtitle(i) + theme_bw() + theme(panel.grid=element_blank())
plot_list[[i]] <- fig
}
plot <- ggarrange(plotlist=plot_list, common.legend=T, legend="bottom")
ggsave(plot, filename="art_status_none.jpg", dpi=500, height=14, width=14)
}
col_sep <- which(names(plhiv_comb)=="art_status")
plhiv_comb <- plhiv_comb %>% group_by_at(1:(col_sep-1)) %>%
summarise_at(vars(-art_status), ~sum(., na.rm=T)) #NAs are because no LTFU on initiation (so ipt_initiate_ltfu=NA, etc.)
#calculate DALYs
plhiv_comb <- calc_dalys(as.data.table(plhiv_comb), "PLHIV", other_params$life_exp_plhiv[[j]],
other_params$dw_plhiv_tb[[j]], other_params$dw_plhiv_art[[j]],
other_params$dw_plhiv_no_art[[j]],
other_params$dur_tb_tx,
other_params$disc_fac[[j]], start_yr)
#calculate costs
plhiv_comb <- lapply(unique(plhiv_comb$code), function(x)
calc_costs(plhiv_comb %>% filter(code==x), "plhiv", cost_params[[x]][j, ],
costs_i4tb_impl %>% filter(code==x),
plhiv_params, other_params$disc_fac[[j]], start_yr))
plhiv_comb <- as.data.frame(rbindlist(plhiv_comb))
View(plhiv_comb)
cost_params
View(cost_params)
names(plhiv_params)
test1 <- test2 <- test3 <- 5
test1
test2
test <- "6H"
test2 <- (test=="1HP")*5 + (test=="3HP")*4 + (test=="6H")*3
test2
View(cost_params)
names(plhiv_params)
load("data/pub_targets.Rda")
View(pop_calcs)
setwd("~/GitHub/tpt-budget-impact")
load("shiny/pub_targets.Rda")
View(pop_calcs %>% filter(code=="NGA"))
View(pop_calcs %>% filter(code=="NGA") %>% select(year, plhiv_art_new_la))
View(pop_calcs %>% filter(code=="NGA") %>% select(year, plhiv_art_new_lag))
input <- list("backlog_plhiv_2024"=5000, "new_plhiv_2024"=5000, "new_plhiv_2025"=1000, "new_plhiv_2026"=1000, "new_plhiv_2027"=1000, "new_plhiv_2028"=1000)
pop_calcs <- pop_calcs %>% filter(code=="NGA" & year %in% 2024:2028)
View(pop_calcs)
pop_calcs <- pop_calcs %>% mutate(backlog_none=if_else(year==2024, as.double(input$backlog_plhiv_2024), backlog_none),
plhiv_art_new_lag=c(input$new_plhiv_2024, input$new_plhiv_2025, input$new_plhiv_2026, input$new_plhiv_2027, input$new_plhiv_2028))
View(pop_calcs %>% select(backlog_none, plhiv_art_new_lag))
plhiv_params$c_1hp
plhiv_params$c_3hp
child_params$c_3hp
adol_params$c_3hp
plhiv_params$c_art_yr
names(pop_calcs)
View(pop_calcs %>% select(starts_with("hh_")))
1.6+0.9+0.9
load("shiny/pub_targets.Rda")
pop_calcs <- pop_calcs %>% filter(code=="NGA" & year %in% 2024:2028)
View(pop_calcs)
pop_calcs$tb_notif_new
pop_calcs <- pop_calcs %>% mutate(tb_notif_new=c(1,2,3,4,5))
pop_calcs$tb_notif_new
help(bs_theme)
library(bslib)
help(bs_theme)
bootstrap_themes(version=5)
bootswatch_themes(version=5)
pop_calcs <- pop_calcs %>% mutate(test=if_else(TRUE, c(1,2,3,4,5), 0))
pop_calcs <- pop_calcs %>% mutate(test=if_else(TRUE, c(1,2,3,4,5), rep(0, 5)))
pop_calcs <- pop_calcs %>% mutate(test=ifelse(TRUE, c(1,2,3,4,5), rep(0, 5)))
pop_calcs$test
regimen <- "3HP"
pop_calcs <- pop_calcs %>% mutate(test=c(1,2,3,4,5)*(regimen=="3HP") + 0*(regimen=="1HP"))
pop_calcs$test
regimen <- "1HP"
pop_calcs <- pop_calcs %>% mutate(test=c(1,2,3,4,5)*(regimen=="3HP") + 0*(regimen=="1HP"))
pop_calcs$test
pop_calcs <- pop_calcs %>% mutate(test=c(1,2,3,4,5)*(regimen=="3HP"))
pop_calcs$test
2.5*5
2.4*5
2.4*5
