backlog)))
}
#calculate cumulative cases and deaths
#plhiv <- plhiv %>% mutate(cum_tb_deaths = tb_deaths + cum_tb_deaths,
#                         cum_non_tb_deaths = non_tb_deaths + cum_non_tb_deaths)
}
#move 2nd column of ltbi_new to prev so that "new" is 1st yr only
plhiv_ltbi[,2:dim(plhiv_ltbi)[2],"ltbi_est_tpt"] <- plhiv_ltbi[,2:dim(plhiv_ltbi)[2],"ltbi_est_tpt"] +
plhiv_ltbi[,2:dim(plhiv_ltbi)[2],"ltbi_new_tpt"]
plhiv_ltbi[,2:dim(plhiv_ltbi)[2],"ltbi_est_not"] <- plhiv_ltbi[,2:dim(plhiv_ltbi)[2],"ltbi_est_not"] +
plhiv_ltbi[,2:dim(plhiv_ltbi)[2],"ltbi_new_not"]
plhiv_ltbi[,2:dim(plhiv_ltbi)[2],"ltbi_new_tpt"] <- 0
plhiv_ltbi[,2:dim(plhiv_ltbi)[2],"ltbi_new_not"] <- 0
#move LTBI sizes back into plhiv_all (no longer need tracking by t)
plhiv_ltbi <- as.data.frame(apply(plhiv_ltbi, MARGIN=c(1,3), FUN=sum))
plhiv_ltbi <- plhiv_ltbi %>% mutate(year=as.numeric(str_sub(row.names(plhiv_ltbi), start=1, end=4)),
scenario=str_sub(row.names(plhiv_ltbi), start=5),
scenario=if_else(scenario=="c", scenarios[[2]], scenarios[[1]]))
plhiv <- left_join(plhiv, plhiv_ltbi, by=c("year", "scenario"))
#combine across TPT and Not TPT, Est and New groups - so same format as contacts dataframe
plhiv <- plhiv %>%
mutate(ltfu=ltbi_ltfu_tpt + active_tb_ltfu_tpt + no_tb_ltfu_tpt +
ltbi_ltfu_not + active_tb_ltfu_not + no_tb_ltfu_not) %>% #keep track of LTFU for costs (no ART costs)
mutate(no_tb_est_not=no_tb_est_not + no_tb_est_not_tb,
no_tb_new_not=no_tb_new_not + no_tb_new_not_tb) %>%
select(-c(no_tb_est_not_tb, no_tb_new_not_tb)) #remove this so consistent naming across variables - no longer need to track it
plhiv <- plhiv %>% select(-c(active_tb_new, no_tb_new))
plhiv_comb <- pivot_longer(plhiv, cols=c(ends_with("_tpt"), ends_with("_not")),
names_to=c(".value", "tpt_status"),
names_sep="_(?=[^_]+$)") #this is regex for "last underscore only"
col_sep <- which(names(plhiv_comb)=="tpt_status")
plhiv_comb <- plhiv_comb %>% group_by_at(1:(col_sep-1)) %>%
summarise_at(vars(-tpt_status), sum)
plhiv_comb <- pivot_longer(plhiv_comb, cols=c(ends_with("_new"), ends_with("_est"),
ends_with("_ltfu"),
-ends_with("covg_new"),
-ends_with("covg_prev"),
-starts_with("plhiv")),
names_to=c(".value", "art_status"),
names_sep="_(?=[^_]+$)")
col_sep <- which(names(plhiv_comb)=="art_status")
plhiv_comb <- plhiv_comb %>% group_by_at(1:(col_sep-1)) %>%
summarise_at(vars(-art_status), ~sum(., na.rm=T)) #NAs are because no LTFU on initiation (so ipt_initiate_ltfu=NA, etc.)
if(FALSE) {
#calculate DALYs
plhiv_comb <- calc_dalys(as.data.table(plhiv_comb), "PLHIV", params$life_exp_plhiv,
params$dw_plhiv_tb, params$dw_plhiv_art,
params$dw_plhiv_no_art,
params$dur_tb_tx,
params$disc_fac, start_yr)
}
plhiv_comb <- calc_costs(plhiv_comb, "plhiv", params,
params, params$disc_fac, start_yr)
#cost-effectiveness code would go here
plhiv_comb <- plhiv_comb %>% select(-c(backlog, cum_disc_costs))
out <- list("plhiv"=plhiv_comb %>% select(-flag),
"plhiv_flag"=max(plhiv_comb$flag)
)
print(out$plhiv_flag)
return(out)
}
#wrapper function to run the whole model for contacts
run_model_contacts <- function(country_name, regimen_child, regimen_adol, regimen_adult,
covg_child, covg_adol, covg_adult, scenarios, options,
child_params, adol_params, adult_params, pop_calcs) {
policy_horizon <- 10 #for now, implement over 10 years and calculate costs/outcomes over 10 years
analytic_horizon <- 10
start_yr <- 2024
end_yr <- start_yr + analytic_horizon - 1
policy_end_yr <- start_yr + policy_horizon - 1
#contact_only_child <- 1*(regimen_child=="None")
#contact_only_adol <- 1*(regimen_adol=="None")
#contact_only_adult <- 1*(regimen_adult=="None")
#options to be added later
reinfect <- 0 #0=base case, or annual risk of infection
visits_3hp <- 1 #1 or 3 visits (1 in main analysis). initiation visit is separate (part of screening)
visits_3hr <- visits_3hp
cxr_screen_5plus <- 1 #whether to include CXR in the screening algorithm for contacts aged 5+ (w/ symptom screen, vs. symptom screen alone)
tb_test_child <- "cxr" #cxr or xpert as a test for children < 5
tpt_wastage <- "full courses"  #wastage factor for drugs (e.g. 0.1), or cost out "full courses" for all initiators
#implementation of options
child_params$cxr_screen <- 0 #only option built in currently - CXR is only used as a test, not screening tool, for children
adol_params$cxr_screen <- cxr_screen_5plus #built into sensitivity/specificity of screening - so only affects costs
adult_params$cxr_screen <- cxr_screen_5plus
child_params$tb_test <- tb_test_child
adol_params$tb_test <- "xpert" #only option built in currently
adult_params$tb_test <- "xpert" #only option built in currently
if(reinfect!=0) {
child_params$p_infect <- reinfect
adol_params$p_infect <- reinfect
adult_params$p_infect <- reinfect
}
child_params$n_visit_3hp <- visits_3hp
adol_params$n_visit_3hp <- visits_3hp
adult_params$n_visit_3hp <- visits_3hp
child_params$n_visit_3hr <- visits_3hr
adol_params$n_visit_3hr <- visits_3hr
adult_params$n_visit_3hr <- visits_3hr
#calculate additional screening and testing probabilities based on options
child_params$p_screen <- child_params$p_symptom
child_params$p_tb_screen <- child_params$p_tb_symptom
child_params$p_negscreen_tb <- child_params$p_asymptom_tb
child_params$sens <- child_params$cxr_sens*(tb_test_child=="cxr") + child_params$xpert_sens*(tb_test_child=="xpert")
child_params$spec <- child_params$cxr_spec*(tb_test_child=="cxr") + child_params$xpert_spec*(tb_test_child=="xpert")
adol_params$p_screen <- adol_params$p_symptom_cxr*(cxr_screen_5plus==1) + adol_params$p_symptom*(cxr_screen_5plus==0)
adol_params$p_tb_screen <- adol_params$p_tb_symptom_cxr*(cxr_screen_5plus==1) + adol_params$p_tb_symptom*(cxr_screen_5plus==0)
adol_params$p_negscreen_tb <- adol_params$p_asymptom_negcxr_tb*(cxr_screen_5plus==1) +
adol_params$p_asymptom_tb*(cxr_screen_5plus==0)
adol_params$sens <- adol_params$xpert_sens
adol_params$spec <- adol_params$xpert_spec
adult_params$p_screen <- adult_params$p_symptom_cxr*(cxr_screen_5plus==1) + adult_params$p_symptom*(cxr_screen_5plus==0)
adult_params$p_tb_screen <- adult_params$p_tb_symptom_cxr*(cxr_screen_5plus==1) + adult_params$p_tb_symptom*(cxr_screen_5plus==0)
adult_params$p_negscreen_tb <- adult_params$p_asymptom_negcxr_tb*(cxr_screen_5plus==1) +
adult_params$p_asymptom_tb*(cxr_screen_5plus==0)
adult_params$sens <- adult_params$xpert_sens
adult_params$spec <- adult_params$xpert_spec
p_hh_child_tpt <- 0*(child_params$cxr_screen==1)*(child_params$tb_test=="xpert") +
other_params$p_hh_child_xpert_tpt*(child_params$cxr_screen==0)*(child_params$tb_test=="xpert") +
other_params$p_hh_child_cxr_tpt*(child_params$cxr_screen==0)*(child_params$tb_test=="cxr")
p_hh_adol_tpt <- other_params$p_hh_adol_symptom_cxr_tpt*(adol_params$cxr_screen==1)*(adol_params$tb_test=="xpert") +
other_params$p_hh_adol_symptom_tpt*(adol_params$cxr_screen==0)*(adol_params$tb_test=="xpert") +
0*(adol_params$cxr_screen==0)*(adol_params$tb_test=="cxr")
p_hh_adult_tpt <- other_params$p_hh_adult_symptom_cxr_tpt*(adult_params$cxr_screen==1)*(adult_params$tb_test=="xpert") +
other_params$p_hh_adult_symptom_tpt*(adult_params$cxr_screen==0)*(adult_params$tb_test=="xpert") +
0*(adult_params$cxr_screen==0)*(adult_params$tb_test=="cxr")
child_params$wastage <- ifelse(tpt_wastage=="full courses", 0,
as.double(tpt_wastage))
child_params$part_course_cost <- ifelse(tpt_wastage=="full courses",
1, 0.5)
adol_params$wastage <- child_params$wastage
adol_params$part_course_cost <- child_params$part_course_cost
adult_params$wastage <- child_params$wastage
adult_params$part_course_cost <- child_params$part_course_cost
#load total numbers of contacts to cover by year
pop_calcs <- pivot_longer(pop_calcs %>% dplyr::select(-c(start_yr, child_ipt)) %>%
filter(year>=start_yr & year<=policy_end_yr),
cols=c(ends_with("tpt"),
ends_with("none")),
names_to=c(".value", "scenario"),
names_sep="_(?=[^_]+$)") #this is regex for "last underscore only"
pop_calcs <- left_join(pop_calcs, covg_child, by="year")
pop_calcs <- left_join(pop_calcs, covg_adol, by="year")
pop_calcs <- left_join(pop_calcs, covg_adult, by="year")
pop_calcs <- pop_calcs %>% mutate(child_ipt=if_else(scenario!="tpt", 0, child_ipt/100),
child_3hp=if_else(scenario!="tpt", 0, child_3hp/100),
child_1hp=if_else(scenario!="tpt", 0, child_1hp/100),
child_3hr=if_else(scenario!="tpt", 0, child_3hr/100),
child_none=if_else(scenario!="tpt", 0, child_none/100),
adol_ipt=if_else(scenario!="tpt", 0, adol_ipt/100),
adol_3hp=if_else(scenario!="tpt", 0, adol_3hp/100),
adol_1hp=if_else(scenario!="tpt", 0, adol_1hp/100),
adol_3hr=if_else(scenario!="tpt", 0, adol_3hr/100),
adol_none=if_else(scenario!="tpt", 0, adol_none/100),
adult_ipt=if_else(scenario!="tpt", 0, adult_ipt/100),
adult_3hp=if_else(scenario!="tpt", 0, adult_3hp/100),
adult_1hp=if_else(scenario!="tpt", 0, adult_1hp/100),
adult_3hr=if_else(scenario!="tpt", 0, adult_3hr/100),
adult_none=if_else(scenario!="tpt", 0, adult_none/100),
scenario=if_else(scenario=="tpt", scenarios[[1]], scenarios[[2]]))
#separate into 3 dataframes - one for each target population group
#hh contacts - targets include initiation, so backcalculate # contacts investigated
#CHILD CONTACTS
child <- pop_calcs %>% select(-pop) %>%
rename("initiate_ipt_covg"="child_ipt",
"initiate_3hp_covg"="child_3hp",
"initiate_1hp_covg"="child_1hp",
"initiate_3hr_covg"="child_3hr",
"pop"="pop04", "hh"="hh_child") %>%
mutate(total=tb_notif_new*hh,
flag=child_none + (initiate_ipt_covg + initiate_3hp_covg +
initiate_3hr_covg + initiate_1hp_covg)/
(child_params$p_initiate*p_hh_child_tpt),
hh_contact_covg = pmin(1, flag),
prop_ipt=if_else(initiate_ipt_covg==0, 0,
initiate_ipt_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + child_none)),
prop_3hp=if_else(initiate_3hp_covg==0, 0,
initiate_3hp_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + child_none)),
prop_1hp=if_else(initiate_1hp_covg==0, 0,
initiate_1hp_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + child_none)),
prop_3hr=if_else(initiate_3hr_covg==0, 0,
initiate_3hr_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + child_none)),
prop_none=if_else(child_none==0, 0,
child_none/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + child_none)),
contact_invest_num = hh_contact_covg*total,
initiate_num=contact_invest_num*p_hh_child_tpt*(prop_ipt+prop_3hp+prop_1hp+prop_3hr)*child_params$p_initiate,
p_initiate=child_params$p_initiate) %>%
select(country, code, year, scenario, flag,
pop, hh, total, prop_ipt, prop_3hp, prop_1hp, prop_3hr, prop_none,
contact_invest_num, initiate_num, p_initiate)
child <- child %>% mutate(p_notif=child_params$p_notif,
p_success=child_params$p_success,
p_die=child_params$p_die)
child_flag <- max(child$flag)
print(child_flag)
#run model for child contacts
child <- calc_contact_invest(child, child_params) #outcomes of contact investigation
child <- calc_tpt_outcomes_contacts(child, child_params) #TPT-related events and outcomes
#calculate out horizon years
child_all <- list()
child_all[[1]] <- child %>% mutate(yrs_out=0,
cum_tb_deaths=tb_deaths,
cum_non_tb_deaths=non_tb_deaths)
for(i in 1:analytic_horizon) {
#children: mortality and reactivation rates vary over time, notification and mortality varies by country
child_prev <- child_all[[i]]
if(i <=2) {
child_cur <- model_tb_contacts(child_prev, child_params$p_notif, child_params$p_success,
child_params$p_reactivate_02, child_params$p_die_tb,
child_params$p_die_tb_tx, child_params$p_die,
child_params$p_infect, child_params$ltbi_protect,
child_params$prop_fast)
} else if(i==3) {
child_cur <- model_tb_contacts(child_prev, child_params$p_notif, child_params$p_success,
child_params$p_reactivate_25, child_params$p_die_tb,
child_params$p_die_tb_tx, child_params$p_die,
child_params$p_infect, child_params$ltbi_protect,
child_params$prop_fast)
} else if(i==4|i==5) {
child_cur <- model_tb_contacts(child_prev, mean(c(child_params$p_notif, adol_params$p_notif)),
child_params$p_success,
child_params$p_reactivate_25,
mean(c(child_params$p_die_tb, adol_params$p_die_tb)),
mean(c(child_params$p_die_tb_tx, adol_params$p_die_tb_tx)),
mean(c(child_params$p_die, adol_params$p_die)),
child_params$p_infect, child_params$ltbi_protect,
child_params$prop_fast)
} else if(i>5 & i<=10) {
child_cur <- model_tb_contacts(child_prev, adol_params$p_notif, adol_params$p_success,
child_params$p_reactivate_510, adol_params$p_die_tb,
adol_params$p_die_tb_tx, adol_params$p_die,
child_params$p_infect, child_params$ltbi_protect,
child_params$prop_fast)
} else if(i>10) {
child_cur <- model_tb_contacts(child_prev, adol_params$p_notif_1524, adult_params$p_success,
child_params$p_reactivate_10plus,
mean(c(adol_params$p_die_tb, adult_params$p_die_tb)),
mean(c(adol_params$p_die_tb_tx, adult_params$p_die_tb_tx)),
mean(c(adol_params$p_die, adult_params$p_die)),
child_params$p_infect, child_params$ltbi_protect,
child_params$prop_fast)
}
child_cur <- child_cur %>% mutate(yrs_out=i)
child_all[[i+1]] <- child_cur
}
child_all <- rbindlist(child_all, use.names=T)
child_comb <- combine_yrs(child_all, "child", policy_end_yr, end_yr) #combine across years
#CONTACTS AGED 5-14
adol <- pop_calcs %>% select(-pop) %>%
rename("initiate_ipt_covg"="adol_ipt",
"initiate_3hp_covg"="adol_3hp",
"initiate_1hp_covg"="adol_1hp",
"initiate_3hr_covg"="adol_3hr",
"pop"="pop514", "hh"="hh_adol") %>%
mutate(total=tb_notif_new*hh,
flag=adol_none + (initiate_ipt_covg + initiate_3hp_covg +
initiate_3hr_covg + initiate_1hp_covg)/
(adol_params$p_initiate*p_hh_adol_tpt),
hh_contact_covg = pmin(1, flag),
prop_ipt=if_else(initiate_ipt_covg==0, 0,
initiate_ipt_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adol_none)),
prop_3hp=if_else(initiate_3hp_covg==0, 0,
initiate_3hp_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adol_none)),
prop_1hp=if_else(initiate_1hp_covg==0, 0,
initiate_1hp_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adol_none)),
prop_3hr=if_else(initiate_3hr_covg==0, 0,
initiate_3hr_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adol_none)),
prop_none=if_else(adol_none==0, 0,
adol_none/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adol_none)),
contact_invest_num = hh_contact_covg*total,
initiate_num=contact_invest_num*p_hh_adol_tpt*(prop_ipt+prop_3hp+prop_1hp+prop_3hr)*adol_params$p_initiate,
p_initiate=adol_params$p_initiate) %>%
select(country, code, year, scenario, flag,
pop, hh, total, prop_ipt, prop_3hp, prop_1hp, prop_3hr, prop_none,
contact_invest_num, initiate_num, p_initiate)
adol <- adol %>% mutate(p_notif=adol_params$p_notif,
p_success=adol_params$p_success,
p_die=adol_params$p_die)
adol_flag <- max(adol$flag)
print(adol_flag)
#run model for adol contacts
adol <- calc_contact_invest(adol, adol_params) #outcomes of contact investigation
adol <- calc_tpt_outcomes_contacts(adol, adol_params) #TPT-related events and outcomes
#calculate out horizon years
adol_all <- list()
adol_all[[1]] <- adol %>% mutate(yrs_out=0,
cum_tb_deaths=tb_deaths,
cum_non_tb_deaths=non_tb_deaths)
for(i in 1:analytic_horizon) {
#mortality and reactivation rates vary over time, notification and mortality varies by country
adol_prev <- adol_all[[i]]
if(i <=2) {
adol_cur <- model_tb_contacts(adol_prev, adol_params$p_notif, adol_params$p_success,
adol_params$p_reactivate_02, adol_params$p_die_tb,
adol_params$p_die_tb_tx, adol_params$p_die,
adol_params$p_infect, adol_params$ltbi_protect,
adol_params$prop_fast)
}
else if(i>2 & i<=5) {
adol_cur <- model_tb_contacts(adol_prev, adol_params$p_notif, adol_params$p_success,
adol_params$p_reactivate_25, adol_params$p_die_tb,
adol_params$p_die_tb_tx, adol_params$p_die,
adol_params$p_infect, adol_params$ltbi_protect,
adol_params$prop_fast)
} else if(i>5 & i<=10) {
adol_cur <- model_tb_contacts(adol_prev, mean(c(adol_params$p_notif, adol_params$p_notif_1524)),
mean(c(adol_params$p_success, adult_params$p_success)),
adol_params$p_reactivate_510,
mean(c(adol_params$p_die_tb, adult_params$p_die_tb)),
mean(c(adol_params$p_die_tb_tx, adult_params$p_die_tb_tx)),
mean(c(adol_params$p_die, adult_params$p_die)),
adol_params$p_infect, adol_params$ltbi_protect,
adol_params$prop_fast)
} else if(i>10) {
adol_cur <- model_tb_contacts(adol_prev, c(adol_params$p_notif_1524, adult_params$p_notif),
adult_params$p_success,
adol_params$p_reactivate_10plus,
mean(c(adol_params$p_die_tb, adult_params$p_die_tb)),
mean(c(adol_params$p_die_tb_tx, adult_params$p_die_tb_tx)),
mean(c(adol_params$p_die, adult_params$p_die)),
adol_params$p_infect, adol_params$ltbi_protect,
adol_params$prop_fast)
}
adol_cur <- adol_cur %>% mutate(yrs_out=i)
adol_all[[i+1]] <- adol_cur
}
adol_all <- rbindlist(adol_all, use.names=T)
adol_comb <- combine_yrs(adol_all, "adol", policy_end_yr, end_yr) #combine across years
#ADULT CONTACTS
adult <- pop_calcs %>% select(-pop) %>%
rename("initiate_ipt_covg"="adult_ipt",
"initiate_3hp_covg"="adult_3hp",
"initiate_1hp_covg"="adult_1hp",
"initiate_3hr_covg"="adult_3hr",
"pop"="popadult", "hh"="hh_adult") %>%
mutate(total=tb_notif_new*hh,
flag=adult_none + (initiate_ipt_covg + initiate_3hp_covg +
initiate_3hr_covg + initiate_1hp_covg)/
(adult_params$p_initiate*p_hh_adult_tpt),
hh_contact_covg = pmin(1, flag),
prop_ipt=if_else(initiate_ipt_covg==0, 0,
initiate_ipt_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adult_none)),
prop_3hp=if_else(initiate_3hp_covg==0, 0,
initiate_3hp_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adult_none)),
prop_1hp=if_else(initiate_1hp_covg==0, 0,
initiate_1hp_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adult_none)),
prop_3hr=if_else(initiate_3hr_covg==0, 0,
initiate_3hr_covg/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adult_none)),
prop_none=if_else(adult_none==0, 0,
adult_none/(initiate_ipt_covg + initiate_3hp_covg + initiate_1hp_covg +
initiate_3hr_covg + adult_none)),
contact_invest_num = hh_contact_covg*total,
initiate_num=contact_invest_num*p_hh_adult_tpt*(prop_ipt+prop_3hp+prop_1hp+prop_3hr)*adult_params$p_initiate,
p_initiate=adult_params$p_initiate) %>%
select(country, code, year, scenario, flag,
pop, hh, total, prop_ipt, prop_3hp, prop_1hp, prop_3hr, prop_none,
contact_invest_num, initiate_num, p_initiate)
adult <- adult %>% mutate(p_notif=adult_params$p_notif,
p_success=adult_params$p_success,
p_die=adult_params$p_die)
adult_flag <- max(adult$flag)
print(adult_flag)
#run model for adult contacts
adult <- calc_contact_invest(adult, adult_params) #outcomes of contact investigation
adult <- calc_tpt_outcomes_contacts(adult, adult_params) #TPT-related events and outcomes
#calculate out horizon years
adult_all <- list()
adult_all[[1]] <- adult %>% mutate(yrs_out=0,
cum_tb_deaths=tb_deaths,
cum_non_tb_deaths=non_tb_deaths)
for(i in 1:analytic_horizon) {
#mortality and reactivation rates vary over time, notification and mortality varies by country
adult_prev <- adult_all[[i]]
if(i <=2) {
adult_cur <- model_tb_contacts(adult_prev, adult_params$p_notif, adult_params$p_success,
adult_params$p_reactivate_02, adult_params$p_die_tb,
adult_params$p_die_tb_tx, adult_params$p_die,
adult_params$p_infect, adult_params$ltbi_protect,
adult_params$prop_fast)
} else if(i>2 & i<=5) {
adult_cur <- model_tb_contacts(adult_prev, adult_params$p_notif, adult_params$p_success,
adult_params$p_reactivate_25, adult_params$p_die_tb,
adult_params$p_die_tb_tx, adult_params$p_die,
adult_params$p_infect, adult_params$ltbi_protect,
adult_params$prop_fast)
} else if(i>5 & i<=10) {
adult_cur <- model_tb_contacts(adult_prev, adult_params$p_notif, adult_params$p_success,
adult_params$p_reactivate_510, adult_params$p_die_tb,
adult_params$p_die_tb_tx, adult_params$p_die,
adult_params$p_infect, adult_params$ltbi_protect,
adult_params$prop_fast)
} else if(i>10) {
adult_cur <- model_tb_contacts(adult_prev, adult_params$p_notif, adult_params$p_success,
adult_params$p_reactivate_10plus, adult_params$p_die_tb,
adult_params$p_die_tb_tx, adult_params$p_die,
adult_params$p_infect, adult_params$ltbi_protect,
adult_params$prop_fast)
}
adult_cur <- adult_cur %>% mutate(yrs_out=i)
adult_all[[i+1]] <- adult_cur
}
adult_all <- rbindlist(adult_all, use.names=T)
adult_comb <- combine_yrs(adult_all, "adult", policy_end_yr, end_yr) #combine across years
#calculate DALYs and discounted DALYs
if(FALSE) {
child_comb <-  calc_dalys(as.data.table(child_comb), "child", life_exp_child, other_params$dw_tb,
other_params$dw_notb, 1, other_params$dur_tb_tx, other_params$disc_fac,
start_yr)
adol_comb <-  calc_dalys(as.data.table(adol_comb), "adol", life_exp_adol, other_params$dw_tb,
other_params$dw_notb, 1, other_params$dur_tb_tx, other_params$disc_fac,
start_yr)
adult_comb <-  calc_dalys(as.data.table(adult_comb), "adult", life_exp_adult, other_params$dw_tb,
other_params$dw_notb, 1, other_params$dur_tb_tx, other_params$disc_fac,
start_yr)
}
child_comb <- child_comb %>%
mutate(initiate_ipt=complete_ipt+part_complete_ipt+tox_nohosp_ipt+tox_hosp_ipt,
initiate_3hp=complete_3hp+part_complete_3hp+tox_nohosp_3hp+tox_hosp_3hp,
initiate_1hp=complete_1hp+part_complete_1hp+tox_nohosp_1hp+tox_hosp_1hp,
initiate_3hr=complete_3hr+part_complete_3hr+tox_nohosp_3hr+tox_hosp_3hr)
adol_comb <- adol_comb %>%
mutate(initiate_ipt=complete_ipt+part_complete_ipt+tox_nohosp_ipt+tox_hosp_ipt,
initiate_3hp=complete_3hp+part_complete_3hp+tox_nohosp_3hp+tox_hosp_3hp,
initiate_1hp=complete_1hp+part_complete_1hp+tox_nohosp_1hp+tox_hosp_1hp,
initiate_3hr=complete_3hr+part_complete_3hr+tox_nohosp_3hr+tox_hosp_3hr)
adult_comb <- adult_comb %>%
mutate(initiate_ipt=complete_ipt+part_complete_ipt+tox_nohosp_ipt+tox_hosp_ipt,
initiate_3hp=complete_3hp+part_complete_3hp+tox_nohosp_3hp+tox_hosp_3hp,
initiate_1hp=complete_1hp+part_complete_1hp+tox_nohosp_1hp+tox_hosp_1hp,
initiate_3hr=complete_3hr+part_complete_3hr+tox_nohosp_3hr+tox_hosp_3hr)
#calculate costs
child_comb <- calc_costs(child_comb, "child", child_params,
child_params, child_params$disc_fac, start_yr)
adol_comb <- calc_costs(adol_comb, "adol", adol_params,
adol_params, adol_params$disc_fac, start_yr)
adult_comb <- calc_costs(adult_comb, "adult", adult_params,
adult_params, adult_params$disc_fac, start_yr)
out <- list("child"=child_comb, "adol"=adol_comb, "adult"=adult_comb,
"child_flag"=child_flag, "adol_flag"=adol_flag, "adult_flag"=adult_flag)
return(out)
}
regimens <- c("3HP", "1HP", "3HR", "6H", "None")
countries <- c("Ethiopia", "India", "Nigeria", "South Africa", "Zambia")
scenarios <- c("TPT Scaleup", "Comparator (no TPT)")
cost_colors <- data.frame(row.names=c("cost_tx", "cost_art", "cost_contact",
"cost_3hp", "cost_1hp", "cost_3hr",
"cost_ipt", "cost_tox", "cost_impl"),
colors=c(brewer.pal(n=8, name="Set2"), brewer.pal(n=12, name="Paired")[[12]]),
labels=c("TB treatment", "ART",  "Contact investigation & diagnosis",
"3HP drugs & clinic visits", "1HP drugs & clinic visits",
"3HR drugs & clinic visits",
"6H drugs & clinic visits", "TPT toxicity management",
"Implementation costs (short-course TPT)")
)
options_split <- c("Equal across new & previously enrolled PLHIV"=1,
"Prioritize PLHIV newly enrolled on ART"=2)
plhiv_option_split <- options_split[[2]]
country <- "Ethiopia"
code <- "ETH"
cost_params <- unlist(cost_params[[country_code]])
country_code <- "ETH"
cost_params <- unlist(cost_params[[country_code]])
cost_params[["impl"]] <- 0
option_split <- input$plhiv_option_split
option_split <- plhiv_option_split
pop_calcs <- pop_calcs %>% filter(code==country_code & year %in% 2024:2033)
plhiv_params <- c(plhiv_params, other_params, cost_params,
"p_ltbi"=ltbi_params %>% filter(iso3==country_code) %>% pull(ltbi_prev),
"p_notif_ltfu"=p_notif_adult[[country_code]],
"p_success"=p_success_plhiv[[country_code]],
"yrs_new"=2, "yrs"=10)
#allocation across new vs. previously enrolled will be done in the model itself
num_plhiv_3hp <- c(input$num_plhiv_2024*input$split_plhiv_3hp_2024,
input$num_plhiv_2025*input$split_plhiv_3hp_2025,
input$num_plhiv_2026*input$split_plhiv_3hp_2026,
input$num_plhiv_2027*input$split_plhiv_3hp_2027,
input$num_plhiv_2028*input$split_plhiv_3hp_2028,
input$num_plhiv_2029*input$split_plhiv_3hp_2029,
input$num_plhiv_2030*input$split_plhiv_3hp_2030,
input$num_plhiv_2031*input$split_plhiv_3hp_2031,
input$num_plhiv_2032*input$split_plhiv_3hp_2032,
input$num_plhiv_2033*input$split_plhiv_3hp_2033)/100
num_plhiv_3hp <- rep(5000, 10)
num_plhiv_3hr <- rep(5000, 10)
num_plhiv_1hp <- rep(0, 10)
num_plhiv_ipt <- rep(0, 10)
num_plhiv <- list("3hp"=num_plhiv_3hp,
"1hp"=num_plhiv_1hp,
"3hr"=num_plhiv_3hr,
"6h"=num_plhiv_6h)
num_plhiv_6h <- rep(0, 10)
num_plhiv <- list("3hp"=num_plhiv_3hp,
"1hp"=num_plhiv_1hp,
"3hr"=num_plhiv_3hr,
"6h"=num_plhiv_6h)
plhiv_out <- run_model_plhiv(input$country, num_plhiv, scenarios, plhiv_params, pop_calcs, option_split)
runApp('shiny')
runApp('shiny')
runApp('shiny')
